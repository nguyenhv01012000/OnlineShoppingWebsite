{"version":3,"sources":["state/AppReducer.jsx","state/context/AppContext.jsx","pages/Lines.jsx","assets/left_arrow.svg","pages/Home.jsx","components/BarChart.jsx","pages/Bars.jsx","components/PieChart.jsx","components/OHLCCharts.jsx","components/Loader.jsx","pages/CandleStick.jsx","components/MapCharts.jsx","App.js","reportWebVitals.js","index.js"],"names":["AppReducer","state","action","type","onDaily","onWeekly","onMonthly","onYearly","onAll","CryptosContext","createContext","SparklineContext","ClickContext","UserDataContext","AppProvider","props","useState","cryptos","setCryptos","sparkline","setSparkline","userData","setUserData","useReducer","dispatch","Provider","value","children","process","REACT_APP_NOMICS_KEY","REACT_APP_LOCATION_KEY","Lines","Home","ColorAxis","Highcharts","Bars","HighchartsMore","CandleSticks","data","ohlc","volume","dataLength","length","i","push","parseFloat","options","chart","backgroundColor","borderRadius","height","title","text","style","color","fontFamily","series","name","id","tooltip","pointFormat","linkedTo","yAxis","valueDecimals","rangeSelector","buttonTheme","fill","stroke","r","fontWeight","states","hover","select","inputBoxBorderColor","inputBoxWidth","inputBoxHeight","inputStyle","labelStyle","selected","plotOptions","line","dashStyle","borderColor","marker","enabled","radius","candlestick","lineColor","upColor","upLineColor","column","abands","lineWidth","bottomLine","styles","topLine","xAxis","tickColor","crosshair","labels","align","x","snap","resize","gridLineColor","visible","top","offset","split","shape","shadow","positioner","width","point","this","isHeader","Math","max","min","plotX","plotLeft","chartWidth","marginRight","y","plotY","plotTop","stockTools","gui","navigator","margin","outlineColor","handles","scrollbar","barBackgroundColor","barBorderColor","barBorderRadius","buttonArrowColor","buttonBackgroundColor","rifleColor","trackBackgroundColor","credits","time","timezone","useUTC","minWidth","maxWidth","highcharts","constructorType","HollowCandlestick","HeikinAshi","Indicators","DragPanes","AnnotationsAdvanced","PriceIndicator","FullScreen","StockTools","Loader","className","CandleStick","OHLC","setOHLC","loading","setLoading","getCandleStickData","axios","all","get","Date","now","then","res","useEffect","setInterval","HighchartsMaps","App","component","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.421925f1.chunk.js","sourcesContent":["/**setting up the price-items reducer */\r\n\r\nexport const DAILY_CHART = \"DAILY_CHART\";\r\nexport const WEEKLY_CHART = \"WEEKLY_CHART\";\r\nexport const MONTHLY_CHART = \"MONTHLY_CHART\";\r\nexport const YEARLY_CHART = \"YEARLY_CHART\";\r\nexport const ALL_CHART = \"ALL_CHART\";\r\n\r\nexport const AppReducer = (state, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase DAILY_CHART:\r\n\t\t\t//eslint-disable-next-line no-eval\r\n\t\t\treturn [\r\n\t\t\t\t{ onDaily: true },\r\n\t\t\t\t{ onWeekly: false },\r\n\t\t\t\t{ onMonthly: false },\r\n\t\t\t\t{ onYearly: false },\r\n\t\t\t\t{ onAll: false },\r\n\t\t\t];\r\n\t\tcase WEEKLY_CHART:\r\n\t\t\treturn [\r\n\t\t\t\t{ onDaily: false },\r\n\t\t\t\t{ onWeekly: true },\r\n\t\t\t\t{ onMonthly: false },\r\n\t\t\t\t{ onYearly: false },\r\n\t\t\t\t{ onAll: false },\r\n\t\t\t];\r\n\t\tcase MONTHLY_CHART:\r\n\t\t\treturn [\r\n\t\t\t\t{ onDaily: false },\r\n\t\t\t\t{ onWeekly: false },\r\n\t\t\t\t{ onMonthly: true },\r\n\t\t\t\t{ onYearly: false },\r\n\t\t\t\t{ onAll: false },\r\n\t\t\t];\r\n\t\tcase YEARLY_CHART:\r\n\t\t\treturn [\r\n\t\t\t\t{ onDaily: false },\r\n\t\t\t\t{ onWeekly: false },\r\n\t\t\t\t{ onMonthly: false },\r\n\t\t\t\t{ onYearly: true },\r\n\t\t\t\t{ onAll: false },\r\n\t\t\t];\r\n\t\tcase ALL_CHART:\r\n\t\t\treturn [\r\n\t\t\t\t{ onDaily: false },\r\n\t\t\t\t{ onWeekly: false },\r\n\t\t\t\t{ onMonthly: false },\r\n\t\t\t\t{ onYearly: false },\r\n\t\t\t\t{ onAll: true },\r\n\t\t\t];\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import React, { createContext, useReducer, useState } from \"react\";\r\nimport { AppReducer } from \"../AppReducer\";\r\n\r\nexport const CryptosContext = createContext();\r\nexport const SparklineContext = createContext();\r\nexport const ClickContext = createContext();\r\nexport const UserDataContext = createContext();\r\n\r\nexport const AppProvider = (props) => {\r\n\tconst [cryptos, setCryptos] = useState([]);\r\n\tconst [sparkline, setSparkline] = useState([]);\r\n\tconst [userData, setUserData] = useState();\r\n\tconst [state, dispatch] = useReducer(AppReducer, [\r\n\t\t{ onDaily: true },\r\n\t\t{ onWeekly: false },\r\n\t\t{ onMonthly: false },\r\n\t\t{ onYearly: false },\r\n\t\t{ onAll: false },\r\n\t]);\r\n\r\n\treturn (\r\n\t\t<ClickContext.Provider value={[state, dispatch]}>\r\n\t\t\t<UserDataContext.Provider value={[userData, setUserData]}>\r\n\t\t\t\t<CryptosContext.Provider value={[cryptos, setCryptos]}>\r\n\t\t\t\t\t<SparklineContext.Provider value={[sparkline, setSparkline]}>\r\n\t\t\t\t\t\t{props.children}\r\n\t\t\t\t\t</SparklineContext.Provider>\r\n\t\t\t\t</CryptosContext.Provider>\r\n\t\t\t</UserDataContext.Provider>\r\n\t\t</ClickContext.Provider>\r\n\t);\r\n};\r\n","// /* eslint-disable no-unused-vars */\r\nimport axios from \"axios\";\r\nimport React, { useContext, useEffect } from \"react\";\r\nimport { BTCChart } from \"../components/HLC\";\r\nimport {\r\n  LineChart,\r\n  WeatherChart,\r\n  MultiLine,\r\n  BoostModule,\r\n  StackedArea,\r\n} from \"../components/LineChart\";\r\nimport { SparklineContext } from \"../state/context/AppContext\";\r\n\r\nconst api = {\r\n  base: \"https://api.nomics.com/v1/currencies/ticker?\",\r\n  key: process.env.REACT_APP_NOMICS_KEY,\r\n  sparklineBase: \"https://api.coingecko.com/api/v3/coins/\",\r\n  zoneKey: process.env.REACT_APP_LOCATION_KEY,\r\n  zoneBase: \"https://api.ipgeolocation.io/ipgeo?\",\r\n};\r\n\r\nfunction Lines() {\r\n  const [sparkline, setSparkline] = useContext(SparklineContext);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`${api.zoneBase}apiKey=${api.zoneKey}&include=useragent`)\r\n      .then((response) => {\r\n        axios\r\n          .all([\r\n            axios.get(\r\n              `https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=${response.data.currency.code}&days=720&interval=hourly`\r\n            ),\r\n          ])\r\n          .then((ress) => {\r\n            setSparkline(ress[0].data);\r\n          })\r\n          .catch((errr) => {\r\n            console.log(errr);\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n\r\n    return () => {};\r\n  }, [setSparkline]);\r\n\r\n  return (\r\n    <div className=\"container lines\">\r\n      <BTCChart splineData={sparkline} />\r\n      <BoostModule />\r\n      <WeatherChart />\r\n      <MultiLine />\r\n      <StackedArea />\r\n      <LineChart />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Lines;\r\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgLeftArrow(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 72,\n    height: 22,\n    viewBox: \"0 0 72 22\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    className: \"bow-arrow\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"none\",\n    stroke: \"#fff\",\n    strokeWidth: 2,\n    strokeMiterlimit: 0,\n    d: \"M.043 11.119h70.714M60.917 1.319l9.8 9.8-9.8 9.8\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgLeftArrow);\nexport default __webpack_public_path__ + \"static/media/left_arrow.4d522a9d.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ReactComponent as Left } from \"../assets/left_arrow.svg\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <div className=\"home\">\r\n      <div>\r\n        <Link to=\"/lines\">\r\n          {\" \"}\r\n          Lines & Area <Left />\r\n        </Link>\r\n        <Link to=\"/ohlc-and-candlestick\">\r\n          OHLC & Candlesticks <Left />\r\n        </Link>\r\n        <Link to=\"/bars\">\r\n          Bars <Left />{\" \"}\r\n        </Link>\r\n        <Link to=\"/maps\">\r\n          Maps <Left />\r\n        </Link>\r\n        <Link to=\"/pie\">\r\n          Pie & Donut <Left />\r\n        </Link>\r\n        <Link to=\"/scatter\">\r\n          Bubble & Scatter <Left />\r\n        </Link>\r\n      </div>\r\n      <div className=\"footer\">\r\n        <span>\r\n          {\" \"}\r\n          Made with &#x2764;&#xfe0f; by{\" \"}\r\n          <a\r\n            href=\"https://dhera.dev/\"\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n            style={{ color: \"#fff\", textDecoration: \"underline\" }}\r\n          >\r\n            Chidera Okeke\r\n          </a>\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import HighchartsReact from \"highcharts-react-official\";\r\nimport Highcharts from \"highcharts\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport ChartData from \"../assets/bar.json\";\r\nimport ColorAxis from \"highcharts/modules/coloraxis\";\r\n\r\nColorAxis(Highcharts);\r\n\r\nexport function BarChart() {\r\n  const [dataChart, setDataChart] = useState({});\r\n\r\n  /**chart js styling options */\r\n  const chartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    /** tooltip styling and logic */\r\n    hover: { mode: \"nearest\", intersect: false, axis: \"x\" }, //allow tooltip to show once the mouse is at the nearest defined data item rather than only once it intersects\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n\r\n      title: {\r\n        display: true,\r\n        text: \"Simple Bar Chart\",\r\n        padding: {\r\n          top: 10,\r\n          bottom: 10,\r\n        },\r\n        color: \"#fff\",\r\n\r\n        font: {\r\n          family: '\"Syne Mono\", monospace',\r\n\r\n          weight: \"500\",\r\n          size: 18,\r\n          lineHeight: 1,\r\n        },\r\n      },\r\n      tooltip: {\r\n        //basic styling of the tooltip(onHover)\r\n        mode: \"nearest\", //allow tooltip to show once the mouse is at the nearest defined data item rather than only once it intersects\r\n        intersect: false, //allow tooltip to show once the mouse is at the nearest defined data item rather than only once it intersects\r\n        axis: \"x\",\r\n        enabled: true,\r\n        displayColors: false, //remove the tiny colored box in the tooltip label\r\n        titleSpacing: 3,\r\n        titleMarginBottom: 2,\r\n        caretPadding: 6,\r\n        caretSize: 4,\r\n        padding: 8,\r\n        backgroundColor: \"rgb(255, 255, 255)\",\r\n        bodyAlign: \"center\",\r\n        titleColor: \"#333\",\r\n        titleFont: {\r\n          family: '\"Syne Mono\", monospace',\r\n\r\n          weight: \"500\",\r\n          size: 18,\r\n          lineHeight: 1,\r\n        },\r\n\r\n        xPadding: 12,\r\n        yPadding: 12,\r\n        titleAlign: \"center\",\r\n        callbacks: {\r\n          /** label color */\r\n          labelColor: function (tooltipItem, chart) {\r\n            return {\r\n              borderColor: \"rgb(5, 15, 25)\",\r\n              backgroundColor: \"rgb(5, 15, 25)\",\r\n            };\r\n          },\r\n\r\n          labelTextColor: function (tooltipItem, chart) {\r\n            return \"#333\";\r\n          },\r\n        },\r\n      },\r\n    },\r\n\r\n    scales: {\r\n      x: {\r\n        offset: true, //adds padding to the beginning and end of map\r\n        beginAtZero: false,\r\n        grid: {\r\n          color: \"transparent\",\r\n          display: false, //removes gridline display\r\n          drawBorder: true,\r\n        },\r\n        distribution: \"series\",\r\n        display: true,\r\n        ticks: {\r\n          //basic styling of the ticks(axis)\r\n          fontSize: 18,\r\n          lineHeight: 1.2,\r\n          family: '\"Syne Mono\", monospace',\r\n\r\n          fontWeight: \"300\",\r\n          padding: 0,\r\n          fontColor: \"rgba(17, 51, 83, 0.3)\",\r\n          maxTicksLimit: 20,\r\n          minRotation: 0,\r\n          maxRotation: 0,\r\n        },\r\n      },\r\n\r\n      y: {\r\n        display: true,\r\n        beginAtZero: false,\r\n\r\n        ticks: {\r\n          display: true,\r\n        },\r\n        grid: {\r\n          color: \"blue\",\r\n          display: false,\r\n          drawBorder: true,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    /**creating empty arrays for the chart data and pushing the props gotten from home component */\r\n    let data = [];\r\n    let labels = [];\r\n\r\n    ChartData.BarData.values.forEach((val) => {\r\n      labels.push(val.category);\r\n    });\r\n    ChartData.BarData.values.forEach((val) => {\r\n      data.push(val.amount);\r\n    });\r\n\r\n    setDataChart({\r\n      labels,\r\n      datasets: [\r\n        {\r\n          type: \"bar\",\r\n          label: \"values\",\r\n          data,\r\n          borderColor: [\r\n            \"rgba(61, 75, 204)\",\r\n            \"rgba(54, 134, 88)\",\r\n            \"rgba(204, 106, 61)\",\r\n            \"rgba(204, 61, 128)\",\r\n            \"rgba(61, 152, 204)\",\r\n            \"rgba(141, 18, 110)\",\r\n            \"rgba(118, 141, 18)\",\r\n            \"rgba(138, 80, 66)\",\r\n          ],\r\n          fill: \"origin\",\r\n          backgroundColor: [\r\n            \"rgba(61, 75, 204, 0.2)\",\r\n            \"rgba(54, 134, 88, 0.2)\",\r\n            \"rgba(204, 106, 61, 0.2)\",\r\n            \"rgba(204, 61, 128, 0.2)\",\r\n            \"rgba(61, 152, 204, 0.2)\",\r\n            \"rgba(141, 18, 110, 0.2)\",\r\n            \"rgba(118, 141, 18, 0.2)\",\r\n            \"rgba(138, 80, 66, 0.2)\",\r\n          ],\r\n          borderWidth: 1.2,\r\n        },\r\n      ],\r\n    });\r\n  }, []);\r\n  return (\r\n    <div className=\"chart-container\">\r\n      <Bar data={dataChart} options={chartOptions} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function StackedBar() {\r\n  const [dataChart, setDataChart] = useState({});\r\n\r\n  /**chart js styling options */\r\n  const chartOptions = {\r\n    color: \"#fff\",\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    /** tooltip styling and logic */\r\n    hover: { mode: \"nearest\", intersect: false, axis: \"x\" }, //allow tooltip to show once the mouse is at the nearest defined data item rather than only once it intersects\r\n    plugins: {\r\n      title: {\r\n        display: true,\r\n        text: \"Stacked Bar Chart\",\r\n        padding: {\r\n          top: 10,\r\n          bottom: 10,\r\n        },\r\n        color: \"#fff\",\r\n        font: {\r\n          family: '\"Syne Mono\", monospace',\r\n\r\n          weight: \"500\",\r\n          size: 18,\r\n          lineHeight: 1,\r\n        },\r\n      },\r\n      tooltip: {\r\n        //basic styling of the tooltip(onHover)\r\n        mode: \"nearest\", //allow tooltip to show once the mouse is at the nearest defined data item rather than only once it intersects\r\n        intersect: false, //allow tooltip to show once the mouse is at the nearest defined data item rather than only once it intersects\r\n        axis: \"x\",\r\n        enabled: true,\r\n        displayColors: false, //remove the tiny colored box in the tooltip label\r\n        titleSpacing: 3,\r\n        titleMarginBottom: 2,\r\n        caretPadding: 6,\r\n        caretSize: 4,\r\n        padding: 8,\r\n        backgroundColor: \"rgb(255, 255, 255)\",\r\n        bodyAlign: \"center\",\r\n        titleColor: \"#333\",\r\n        titleFont: {\r\n          family: '\"Syne Mono\", monospace',\r\n\r\n          weight: \"500\",\r\n          size: 18,\r\n          lineHeight: 1,\r\n        },\r\n\r\n        xPadding: 12,\r\n        yPadding: 12,\r\n        titleAlign: \"center\",\r\n        callbacks: {\r\n          /** label color */\r\n          labelColor: function (tooltipItem, chart) {\r\n            return {\r\n              borderColor: \"rgb(5, 15, 25)\",\r\n              backgroundColor: \"rgb(5, 15, 25)\",\r\n            };\r\n          },\r\n\r\n          labelTextColor: function (tooltipItem, chart) {\r\n            return \"#333\";\r\n          },\r\n        },\r\n      },\r\n    },\r\n\r\n    scales: {\r\n      x: {\r\n        offset: true, //adds padding to the beginning and end of map\r\n        beginAtZero: false,\r\n        stacked: true,\r\n        grid: {\r\n          color: \"transparent\",\r\n          display: false, //removes gridline display\r\n          drawBorder: true,\r\n        },\r\n        distribution: \"series\",\r\n        display: true,\r\n        ticks: {\r\n          //basic styling of the ticks(axis)\r\n          fontSize: 18,\r\n          lineHeight: 1.2,\r\n          family: '\"Syne Mono\", monospace',\r\n\r\n          fontWeight: \"300\",\r\n          padding: 0,\r\n          fontColor: \"rgba(17, 51, 83, 0.3)\",\r\n          maxTicksLimit: 20,\r\n          minRotation: 0,\r\n          maxRotation: 0,\r\n        },\r\n      },\r\n\r\n      y: {\r\n        display: true,\r\n        beginAtZero: false,\r\n        stacked: true,\r\n\r\n        ticks: {\r\n          display: true,\r\n        },\r\n        grid: {\r\n          color: \"blue\",\r\n          display: false,\r\n          drawBorder: true,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    /**creating empty arrays for the chart data and pushing the props gotten from home component */\r\n    let data = [];\r\n    let dataTwo = [];\r\n    let labels = [];\r\n\r\n    ChartData.StackedBar.values.forEach((val) => {\r\n      if (val.c === 0) {\r\n        data.push(val.y);\r\n        labels.push(val.x);\r\n      }\r\n    });\r\n    ChartData.StackedBar.values.forEach((val) => {\r\n      if (val.c === 1) {\r\n        dataTwo.push(val.y);\r\n      }\r\n    });\r\n    ChartData.StackedBar.values.forEach((val) => {\r\n      if (val.c === 2) {\r\n        dataTwo.push(val.y);\r\n      }\r\n    });\r\n\r\n    setDataChart({\r\n      labels,\r\n      datasets: [\r\n        {\r\n          type: \"bar\",\r\n          label: \"values 2\",\r\n          data: dataTwo,\r\n          fill: \"origin\",\r\n          backgroundColor: [\"#00208a\"],\r\n          borderWidth: 1.2,\r\n        },\r\n        {\r\n          type: \"bar\",\r\n          label: \"values\",\r\n          data,\r\n          fill: \"origin\",\r\n          backgroundColor: [\"rgb(159, 233, 233)\"],\r\n          borderWidth: 1.2,\r\n        },\r\n      ],\r\n    });\r\n  }, []);\r\n  return (\r\n    <div className=\"chart-container\">\r\n      <Bar data={dataChart} options={chartOptions} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function PopulationPyramid() {\r\n  let categories = [];\r\n  let male = [];\r\n  let female = [];\r\n\r\n  ChartData.PyramidData.values.forEach((val) => categories.push(val.Age));\r\n  ChartData.PyramidData.values.forEach((val) => male.push(val.M));\r\n  ChartData.PyramidData.values.forEach((val) => female.push(-val.F));\r\n\r\n  let options = {\r\n    chart: {\r\n      type: \"bar\",\r\n      backgroundColor: \"#1c1b2b\",\r\n      borderRadius: 15,\r\n      height: 600,\r\n    },\r\n    title: {\r\n      text: \"Population pyramid for United States, 2020\",\r\n      style: {\r\n        color: \"#fff\",\r\n        fontFamily: '\"Syne Mono\", monospace',\r\n      },\r\n    },\r\n    subtitle: {\r\n      text: 'Source: <a style=\"color: #fff\" href=\"https://www.populationpyramid.net/united-states-of-america/2020/\">PopulationPyramid.net </a>',\r\n      style: {\r\n        color: \"#fff\",\r\n        fontFamily: '\"Syne Mono\", monospace',\r\n      },\r\n    },\r\n    accessibility: {\r\n      point: {\r\n        valueDescriptionFormat: \"{index}. Age {xDescription}, {value}%.\",\r\n      },\r\n    },\r\n    xAxis: [\r\n      {\r\n        categories,\r\n        reversed: false,\r\n        labels: {\r\n          step: 1,\r\n        },\r\n        accessibility: {\r\n          description: \"Age (female)\",\r\n        },\r\n        lineWidth: 0.4,\r\n      },\r\n      {\r\n        // mirror axis on right side\r\n        opposite: true,\r\n        reversed: false,\r\n        categories,\r\n        linkedTo: 0,\r\n        labels: {\r\n          step: 1,\r\n        },\r\n        accessibility: {\r\n          description: \"Age (male)\",\r\n        },\r\n        lineWidth: 0.4,\r\n      },\r\n    ],\r\n    yAxis: {\r\n      title: {\r\n        text: null,\r\n      },\r\n\r\n      gridLineColor: \"#201d3a\",\r\n      labels: {\r\n        formatter: function () {\r\n          return Math.abs(this.value / 1000000) + \"M\";\r\n        },\r\n      },\r\n      accessibility: {\r\n        description: \"Total population by age\",\r\n        rangeDescription: \"Range: 0 to 12 Million\",\r\n      },\r\n    },\r\n\r\n    colors: [\"#00208a\", \"#e040bd\"],\r\n\r\n    plotOptions: {\r\n      series: {\r\n        stacking: \"normal\",\r\n      },\r\n      column: {\r\n        colorByPoint: true,\r\n      },\r\n    },\r\n\r\n    tooltip: {\r\n      formatter: function () {\r\n        return (\r\n          \"<b>\" +\r\n          this.series.name +\r\n          \", age \" +\r\n          this.point.category +\r\n          \"</b><br/>\" +\r\n          \"Population: \" +\r\n          Highcharts.numberFormat(Math.abs(this.point.y))\r\n        );\r\n      },\r\n    },\r\n    legend: {\r\n      layout: \"vertical\",\r\n      align: \"right\",\r\n      verticalAlign: \"top\",\r\n      x: -70,\r\n      y: 80,\r\n      floating: true,\r\n      borderWidth: 1,\r\n      backgroundColor:\r\n        Highcharts.defaultOptions.legend.backgroundColor || \"#FFFFFF\",\r\n      shadow: true,\r\n    },\r\n\r\n    series: [\r\n      {\r\n        name: \"Female\",\r\n        data: female,\r\n      },\r\n      {\r\n        name: \"Male\",\r\n        data: male,\r\n      },\r\n    ],\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ minWidth: \"360px\", maxWidth: \"800px\", margin: \"1em auto\" }}>\r\n      <HighchartsReact highcharts={Highcharts} options={options} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function GroupedBar() {\r\n  let zero = [];\r\n  let one = [];\r\n  let two = [];\r\n  let three = [];\r\n\r\n  ChartData.Grouped.values.forEach((val) => {\r\n    if (val.position === 0) {\r\n      zero.push(val.value);\r\n    }\r\n  });\r\n  ChartData.Grouped.values.forEach((val) => {\r\n    if (val.position === 1) {\r\n      one.push(val.value);\r\n    }\r\n  });\r\n  ChartData.Grouped.values.forEach((val) => {\r\n    if (val.position === 2) {\r\n      two.push(val.value);\r\n    }\r\n  });\r\n  ChartData.Grouped.values.forEach((val) => {\r\n    if (val.position === 3) {\r\n      three.push(val.value);\r\n    }\r\n  });\r\n\r\n  let options = {\r\n    chart: {\r\n      type: \"bar\",\r\n      backgroundColor: \"#1c1b2b\",\r\n      borderRadius: 15,\r\n      height: 600,\r\n    },\r\n    title: {\r\n      text: \"Grouped Bar Chart\",\r\n      style: {\r\n        color: \"#fff\",\r\n        fontFamily: '\"Syne Mono\", monospace',\r\n      },\r\n    },\r\n\r\n    xAxis: {\r\n      categories: [\"A\", \"B\", \"C\"],\r\n      lineWidth: 0.4,\r\n    },\r\n\r\n    yAxis: {\r\n      min: 0,\r\n      title: {\r\n        text: null,\r\n      },\r\n      labels: {\r\n        overflow: \"justify\",\r\n      },\r\n      gridLineColor: \"#201d3a\",\r\n    },\r\n\r\n    plotOptions: {\r\n      bar: {\r\n        dataLabels: {\r\n          enabled: true,\r\n        },\r\n      },\r\n    },\r\n\r\n    colors: [\"#4e4ed6\", \"#8a27fc\", \"#00208a\", \"#e040bd\"],\r\n\r\n    tooltip: {\r\n      formatter: function () {\r\n        return (\r\n          \"<b>\" +\r\n          this.series.name +\r\n          \"</b><br/>\" +\r\n          \"value: \" +\r\n          Highcharts.numberFormat(Math.abs(this.point.y))\r\n        );\r\n      },\r\n    },\r\n\r\n    series: [\r\n      {\r\n        name: \"0\",\r\n        data: zero,\r\n        borderColor: \"#201d3a\",\r\n      },\r\n      {\r\n        name: \"1\",\r\n        data: one,\r\n        borderColor: \"#201d3a\",\r\n      },\r\n      {\r\n        name: \"2\",\r\n        data: two,\r\n        borderColor: \"#201d3a\",\r\n      },\r\n      {\r\n        name: \"3\",\r\n        data: three,\r\n        borderColor: \"#201d3a\",\r\n      },\r\n    ],\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ minWidth: \"360px\", maxWidth: \"800px\", margin: \"1em auto\" }}>\r\n      <HighchartsReact highcharts={Highcharts} options={options} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function GradientKey() {\r\n  let options = {\r\n    chart: {\r\n      backgroundColor: \"#1c1b2b\",\r\n      borderRadius: 15,\r\n      height: 600,\r\n    },\r\n\r\n    title: {\r\n      text: \"Gradient Color axis\",\r\n      style: {\r\n        color: \"#fff\",\r\n        fontFamily: '\"Syne Mono\", monospace',\r\n      },\r\n    },\r\n    xAxis: {\r\n      categories: [\"1\", \"2\", \"3\", \"4\", \"5\"],\r\n      lineWidth: 0.4,\r\n    },\r\n    colorAxis: {\r\n      min: 0,\r\n      max: 30,\r\n      minColor: \"#ffe8f1\",\r\n      maxColor: \"#8a0067\",\r\n    },\r\n\r\n    yAxis: {\r\n      gridLineColor: \"#201d3a\",\r\n    },\r\n\r\n    series: [\r\n      {\r\n        type: \"column\",\r\n        colorKey: \"colorValue\",\r\n        name: \"X\",\r\n        data: [\r\n          {\r\n            y: 4,\r\n            colorValue: 4,\r\n          },\r\n          {\r\n            y: 26,\r\n            colorValue: 26,\r\n          },\r\n          {\r\n            y: 10,\r\n            colorValue: 10,\r\n          },\r\n          {\r\n            y: 7,\r\n            colorValue: 7,\r\n          },\r\n          {\r\n            y: 6,\r\n            colorValue: 6,\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        type: \"column\",\r\n        colorKey: \"colorValue\",\r\n        name: \"Y\",\r\n        data: [\r\n          {\r\n            y: 10,\r\n            colorValue: 10,\r\n          },\r\n          {\r\n            y: 29,\r\n            colorValue: 29,\r\n          },\r\n          {\r\n            y: 16,\r\n            colorValue: 16,\r\n          },\r\n          {\r\n            y: 20,\r\n            colorValue: 20,\r\n          },\r\n          {\r\n            y: 30,\r\n            colorValue: 30,\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ minWidth: \"360px\", maxWidth: \"800px\", margin: \"1em auto\" }}>\r\n      <HighchartsReact highcharts={Highcharts} options={options} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  BarChart,\r\n  GradientKey,\r\n  GroupedBar,\r\n  PopulationPyramid,\r\n  StackedBar,\r\n} from \"../components/BarChart\";\r\n\r\nfunction Bars() {\r\n  return (\r\n    <div className=\"bars\">\r\n      <BarChart />\r\n      <GradientKey />\r\n      <PopulationPyramid />\r\n      <GroupedBar />\r\n      <StackedBar />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Bars;\r\n","import HighchartsReact from \"highcharts-react-official\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Doughnut, Pie, PolarArea, Radar } from \"react-chartjs-2\";\r\nimport ChartData from \"../assets/pie.json\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsMore from \"highcharts/highcharts-more\";\r\n\r\nHighchartsMore(Highcharts);\r\n\r\nexport function PieChart() {\r\n  const [dataChart, setDataChart] = useState({});\r\n\r\n  /**chart js styling options */\r\n  const chartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    color: \"#fff\",\r\n    layout: {\r\n      padding: 40,\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: \"Simple Pie Chart\",\r\n        padding: {\r\n          top: 20,\r\n          bottom: 20,\r\n        },\r\n        color: \"#fff\",\r\n        font: {\r\n          family: '\"Roboto\", monospace',\r\n          weight: \"500\",\r\n          size: 18,\r\n          lineHeight: 1,\r\n        },\r\n      },\r\n      //tooltip styling and logic\r\n      tooltip: {\r\n        // basic styling of the tooltip(onHover)\r\n        mode: \"nearest\", //allow tooltip to show once the mouse is at the nearest defined data item rather than only once it intersects\r\n        intersect: false, //allow tooltip to show once the mouse is at the nearest defined data item rather than only once it intersects\r\n        axis: \"x\",\r\n        enabled: true,\r\n        displayColors: false, //remove the tiny colored box in the tooltip label\r\n        titleSpacing: 3,\r\n        titleMarginBottom: 2,\r\n        caretPadding: 6,\r\n        caretSize: 4,\r\n        padding: 8,\r\n        backgroundColor: \"rgb(255, 255, 255)\",\r\n        bodyAlign: \"center\",\r\n        titleColor: \"#333\",\r\n        titleFont: {\r\n          family: '\"Roboto\", monospace',\r\n          weight: \"500\",\r\n          size: 18,\r\n          lineHeight: 1,\r\n        },\r\n\r\n        xPadding: 12,\r\n        yPadding: 12,\r\n        titleAlign: \"center\",\r\n        callbacks: {\r\n          /** label color */\r\n          labelColor: function (tooltipItem, chart) {\r\n            return {\r\n              borderColor: \"rgb(5, 15, 25)\",\r\n              backgroundColor: \"rgb(5, 15, 25)\",\r\n            };\r\n          },\r\n\r\n          labelTextColor: function (tooltipItem, chart) {\r\n            return \"#333\";\r\n          },\r\n        },\r\n      },\r\n    },\r\n\r\n    scales: {\r\n      x: {\r\n        offset: false,\r\n        beginAtZero: false,\r\n        grid: {\r\n          color: \"transparent\",\r\n          display: false, //removes gridline display\r\n          drawBorder: true,\r\n        },\r\n        distribution: \"series\",\r\n        display: false,\r\n        ticks: {\r\n          //basic styling of the ticks(axis)\r\n          fontSize: 18,\r\n          lineHeight: 1.2,\r\n          fontFamily: '\"Roboto\", sans-serif',\r\n          fontWeight: \"300\",\r\n          padding: 0,\r\n          fontColor: \"rgba(17, 51, 83, 0.3)\",\r\n          maxTicksLimit: 20,\r\n          minRotation: 0,\r\n          maxRotation: 0,\r\n        },\r\n      },\r\n\r\n      y: {\r\n        display: false,\r\n        beginAtZero: true,\r\n\r\n        ticks: {\r\n          display: true,\r\n        },\r\n        grid: {\r\n          color: \"blue\",\r\n          display: false,\r\n          drawBorder: true,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    /**creating empty arrays for the chart data and pushing the props gotten from home component */\r\n    let data = [];\r\n    let labels = [];\r\n\r\n    ChartData.PieData.values.forEach((val) => {\r\n      labels.push(val.id);\r\n    });\r\n    ChartData.PieData.values.forEach((val) => {\r\n      data.push(val.field);\r\n    });\r\n\r\n    setDataChart({\r\n      labels,\r\n      datasets: [\r\n        {\r\n          type: \"pie\",\r\n          label: \"prices\",\r\n          data,\r\n          fill: \"origin\",\r\n          backgroundColor: [\r\n            \"rgba(61, 75, 204,.2)\",\r\n            \"rgba(78, 166, 74,.2)\",\r\n            \"rgba(204, 106, 61,.2)\",\r\n            \"rgba(204, 61, 128,.2)\",\r\n            \"rgba(61, 152, 204,.2)\",\r\n            \"rgba(141, 18, 110,.2)\",\r\n            \"rgba(118, 141, 18,.2)\",\r\n            \"rgba(138, 80, 66,.2)\",\r\n          ],\r\n          borderColor: [\r\n            \"rgba(61, 75, 204)\",\r\n            \"rgba(78, 166, 74)\",\r\n            \"rgba(204, 106, 61)\",\r\n            \"rgba(204, 61, 128)\",\r\n            \"rgba(61, 152, 204)\",\r\n            \"rgba(141, 18, 110)\",\r\n            \"rgba(118, 141, 18)\",\r\n            \"rgba(138, 80, 66)\",\r\n          ],\r\n          borderWidth: 0.5,\r\n          hoverOffset: 30,\r\n        },\r\n      ],\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      <Pie data={dataChart} options={chartOptions} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function Donut() {\r\n  const [dataChart, setDataChart] = useState({});\r\n\r\n  /**chart js styling options */\r\n  const chartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    color: \"#fff\",\r\n    layout: {\r\n      padding: 40,\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: \"Simple Donut Chart\",\r\n        padding: {\r\n          top: 20,\r\n          bottom: 20,\r\n        },\r\n        color: \"#fff\",\r\n        font: {\r\n          family: '\"Roboto\", monospace',\r\n          weight: \"500\",\r\n          size: 18,\r\n          lineHeight: 1,\r\n        },\r\n      },\r\n      /** tooltip styling and logic */\r\n      tooltip: {\r\n        //basic styling of the tooltip(onHover)\r\n        mode: \"nearest\", //allow tooltip to show once the mouse is at the nearest defined data item rather than only once it intersects\r\n        intersect: false, //allow tooltip to show once the mouse is at the nearest defined data item rather than only once it intersects\r\n        axis: \"x\",\r\n        enabled: true,\r\n        displayColors: false, //remove the tiny colored box in the tooltip label\r\n        titleSpacing: 3,\r\n        titleMarginBottom: 2,\r\n        caretPadding: 6,\r\n        caretSize: 4,\r\n        padding: 8,\r\n        backgroundColor: \"rgb(255, 255, 255)\",\r\n        bodyAlign: \"center\",\r\n        titleColor: \"#333\",\r\n        titleFont: {\r\n          family: '\"Roboto\", monospace',\r\n          weight: \"500\",\r\n          size: 18,\r\n          lineHeight: 1,\r\n        },\r\n\r\n        xPadding: 12,\r\n        yPadding: 12,\r\n        titleAlign: \"center\",\r\n        callbacks: {\r\n          /** label color */\r\n          labelColor: function (tooltipItem, chart) {\r\n            return {\r\n              borderColor: \"rgb(5, 15, 25)\",\r\n              backgroundColor: \"rgb(5, 15, 25)\",\r\n            };\r\n          },\r\n\r\n          labelTextColor: function (tooltipItem, chart) {\r\n            return \"#333\";\r\n          },\r\n        },\r\n      },\r\n    },\r\n\r\n    cutout: \"70%\",\r\n\r\n    scales: {\r\n      x: {\r\n        offset: false,\r\n        beginAtZero: false,\r\n        grid: {\r\n          color: \"transparent\",\r\n          display: false, //removes gridline display\r\n          drawBorder: true,\r\n        },\r\n        distribution: \"series\",\r\n        display: false,\r\n        ticks: {\r\n          //basic styling of the ticks(axis)\r\n          fontSize: 18,\r\n          lineHeight: 1.2,\r\n          fontFamily: '\"Roboto\", sans-serif',\r\n          fontWeight: \"300\",\r\n          padding: 0,\r\n          fontColor: \"rgba(17, 51, 83, 0.3)\",\r\n          maxTicksLimit: 20,\r\n          minRotation: 0,\r\n          maxRotation: 0,\r\n        },\r\n      },\r\n\r\n      y: {\r\n        display: false,\r\n        beginAtZero: true,\r\n\r\n        ticks: {\r\n          display: true,\r\n        },\r\n        grid: {\r\n          color: \"blue\",\r\n          display: false,\r\n          drawBorder: true,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    /**creating empty arrays for the chart data and pushing the props gotten from home component */\r\n    let data = [];\r\n    let labels = [];\r\n\r\n    ChartData.PieData.values.forEach((val) => {\r\n      labels.push(val.id);\r\n    });\r\n    ChartData.PieData.values.forEach((val) => {\r\n      data.push(val.field);\r\n    });\r\n\r\n    setDataChart({\r\n      labels,\r\n      datasets: [\r\n        {\r\n          type: \"doughnut\",\r\n          label: \"prices\",\r\n          data,\r\n          borderColor: [\"rgb(255, 255, 255)\"],\r\n          fill: \"origin\",\r\n          backgroundColor: [\r\n            \"#6a29eb\",\r\n            \"#0b5cb3\",\r\n            \"#b424dc\",\r\n            \"#0ab0c2\",\r\n            \"#1b2dba\",\r\n            \"rgba(141, 18, 110)\",\r\n          ],\r\n          borderWidth: 0.5,\r\n          hoverOffset: 30,\r\n        },\r\n      ],\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      <Doughnut data={dataChart} options={chartOptions} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function DoubleDonut() {\r\n  const [dataChart, setDataChart] = useState({});\r\n\r\n  /**chart js styling options */\r\n  const chartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    color: \"#fff\",\r\n    layout: {\r\n      padding: 40,\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: \"Double Donut Chart\",\r\n        padding: {\r\n          top: 20,\r\n          bottom: 20,\r\n        },\r\n        color: \"#fff\",\r\n        font: {\r\n          family: '\"Roboto\", monospace',\r\n          weight: \"500\",\r\n          size: 18,\r\n          lineHeight: 1,\r\n        },\r\n      },\r\n      /** tooltip styling and logic */\r\n      tooltip: {\r\n        //basic styling of the tooltip(onHover)\r\n        mode: \"nearest\", //allow tooltip to show once the mouse is at the nearest defined data item rather than only once it intersects\r\n        intersect: false, //allow tooltip to show once the mouse is at the nearest defined data item rather than only once it intersects\r\n        axis: \"x\",\r\n        enabled: true,\r\n        displayColors: false, //remove the tiny colored box in the tooltip label\r\n        titleSpacing: 3,\r\n        titleMarginBottom: 2,\r\n        caretPadding: 6,\r\n        caretSize: 4,\r\n        padding: 8,\r\n        backgroundColor: \"rgb(255, 255, 255)\",\r\n        bodyAlign: \"center\",\r\n        titleColor: \"#333\",\r\n        titleFont: {\r\n          family: '\"Roboto\", monospace',\r\n          weight: \"500\",\r\n          size: 18,\r\n          lineHeight: 1,\r\n        },\r\n\r\n        xPadding: 12,\r\n        yPadding: 12,\r\n        titleAlign: \"center\",\r\n        callbacks: {\r\n          /** label color */\r\n          labelColor: function (tooltipItem, chart) {\r\n            return {\r\n              borderColor: \"rgb(5, 15, 25)\",\r\n              backgroundColor: \"rgb(5, 15, 25)\",\r\n            };\r\n          },\r\n\r\n          labelTextColor: function (tooltipItem, chart) {\r\n            return \"#333\";\r\n          },\r\n        },\r\n      },\r\n    },\r\n    cutout: \"60%\",\r\n\r\n    scales: {\r\n      x: {\r\n        offset: false,\r\n        beginAtZero: false,\r\n        stacked: true,\r\n\r\n        grid: {\r\n          color: \"transparent\",\r\n          display: false, //removes gridline display\r\n          drawBorder: true,\r\n        },\r\n        distribution: \"series\",\r\n        display: false,\r\n        ticks: {\r\n          //basic styling of the ticks(axis)\r\n          fontSize: 18,\r\n          lineHeight: 1.2,\r\n          fontFamily: '\"Roboto\", sans-serif',\r\n          fontWeight: \"300\",\r\n          padding: 0,\r\n          fontColor: \"rgba(17, 51, 83, 0.3)\",\r\n          maxTicksLimit: 20,\r\n          minRotation: 0,\r\n          maxRotation: 0,\r\n        },\r\n      },\r\n\r\n      y: {\r\n        display: false,\r\n        beginAtZero: true,\r\n        stacked: true,\r\n\r\n        ticks: {\r\n          display: true,\r\n        },\r\n        grid: {\r\n          color: \"blue\",\r\n          display: false,\r\n          drawBorder: true,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    /**creating empty arrays for the chart data and pushing the props gotten from home component */\r\n    let data = [];\r\n    let dataTwo = [];\r\n    let labels = [];\r\n\r\n    ChartData.PieData.values.forEach((val) => {\r\n      labels.push(val.id);\r\n    });\r\n    ChartData.PieData.values.forEach((val) => {\r\n      data.push(val.field);\r\n    });\r\n    ChartData.PieData.values.forEach((val) => {\r\n      dataTwo.push(val.field + Math.round(Math.random() * 10) + 1.5);\r\n    });\r\n\r\n    setDataChart({\r\n      labels,\r\n      datasets: [\r\n        {\r\n          type: \"doughnut\",\r\n          label: \"First Dataset\",\r\n          data,\r\n          borderColor: [\"rgb(255, 255, 255)\"],\r\n          fill: \"origin\",\r\n          backgroundColor: [\r\n            \"rgba(61, 75, 204)\",\r\n            \"rgba(54, 134, 88)\",\r\n            \"rgba(204, 106, 61)\",\r\n            \"rgba(204, 61, 128)\",\r\n            \"rgba(61, 152, 204)\",\r\n            \"rgba(141, 18, 110)\",\r\n          ],\r\n          borderWidth: 0.5,\r\n          hoverOffset: 30,\r\n          rotation: 30,\r\n        },\r\n        {\r\n          type: \"doughnut\",\r\n          label: \"Second Dataset\",\r\n          data: dataTwo,\r\n          borderColor: [\"rgb(255, 255, 255)\"],\r\n          fill: \"origin\",\r\n          backgroundColor: [\r\n            \"rgba(61, 75, 204)\",\r\n            \"rgba(54, 134, 88)\",\r\n            \"rgba(204, 106, 61)\",\r\n            \"rgba(204, 61, 128)\",\r\n            \"rgba(61, 152, 204)\",\r\n            \"rgba(141, 18, 110)\",\r\n          ],\r\n          borderWidth: 0.5,\r\n          hoverOffset: 30,\r\n          rotation: 35,\r\n        },\r\n      ],\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      <Doughnut data={dataChart} options={chartOptions} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function RadarChart() {\r\n  const [dataChart, setDataChart] = useState({});\r\n\r\n  /**chart js styling options */\r\n  const chartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    color: \"#fff\",\r\n    layout: {\r\n      padding: 40,\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: \"Radar Chart\",\r\n        padding: {\r\n          top: 20,\r\n          bottom: 20,\r\n        },\r\n        color: \"#fff\",\r\n        font: {\r\n          family: '\"Roboto\", monospace',\r\n          weight: \"500\",\r\n          size: 18,\r\n          lineHeight: 1,\r\n        },\r\n      },\r\n      //tooltip styling and logic\r\n      tooltip: {\r\n        // basic styling of the tooltip(onHover)\r\n        mode: \"nearest\", //allow tooltip to show once the mouse is at the nearest defined data item rather than only once it intersects\r\n        axis: \"x\",\r\n        enabled: true,\r\n        displayColors: true, //remove the tiny colored box in the tooltip label\r\n        titleSpacing: 3,\r\n        titleMarginBottom: 2,\r\n        caretPadding: 6,\r\n        caretSize: 4,\r\n        padding: 8,\r\n        backgroundColor: \"rgb(255, 255, 255)\",\r\n        bodyAlign: \"center\",\r\n        titleColor: \"#333\",\r\n        titleFont: {\r\n          family: '\"Roboto\", monospace',\r\n          weight: \"500\",\r\n          size: 18,\r\n          lineHeight: 1,\r\n        },\r\n\r\n        xPadding: 12,\r\n        yPadding: 12,\r\n        titleAlign: \"center\",\r\n        callbacks: {\r\n          /** label color */\r\n          labelColor: function (tooltipItem, chart) {\r\n            return {\r\n              borderColor: tooltipItem.dataset.borderColor,\r\n              backgroundColor: tooltipItem.dataset.borderColor,\r\n            };\r\n          },\r\n\r\n          labelTextColor: function (tooltipItem, chart) {\r\n            return \"#333\";\r\n          },\r\n        },\r\n      },\r\n    },\r\n\r\n    scales: {\r\n      r: {\r\n        angleLines: {\r\n          color: \"#201d3a\",\r\n        },\r\n        grid: {\r\n          color: \"#201d3a\",\r\n        },\r\n        ticks: {\r\n          color: \"#574545\",\r\n          backdropColor: \"#1c1b2b\",\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    /**creating empty arrays for the chart data and pushing the props gotten from home component */\r\n    let data = [];\r\n    let dataTwo = [];\r\n    let labels = [];\r\n\r\n    ChartData.RadarData.values.forEach((val) => {\r\n      if (val.category === \"Allocated budget\") {\r\n        labels.push(val.key);\r\n        data.push(val.value);\r\n      }\r\n    });\r\n    ChartData.RadarData.values.forEach((val) => {\r\n      if (val.category === \"Actual Spending\") {\r\n        dataTwo.push(val.value);\r\n      }\r\n    });\r\n\r\n    setDataChart({\r\n      labels,\r\n      datasets: [\r\n        {\r\n          type: \"radar\",\r\n          label: \"Allocated budget\",\r\n          data,\r\n          borderColor: [\"rgba(61, 75, 204)\"],\r\n          fill: \"origin\",\r\n          backgroundColor: [\"rgba(61, 75, 204,0.2)\"],\r\n          borderWidth: 1.7,\r\n          hoverOffset: 30,\r\n        },\r\n        {\r\n          type: \"radar\",\r\n          label: \"Actual spending\",\r\n          data: dataTwo,\r\n          borderColor: [\"rgba(141, 18, 110)\"],\r\n          fill: \"origin\",\r\n          backgroundColor: [\"rgba(141, 18, 110,.2)\"],\r\n          borderWidth: 1.7,\r\n          hoverOffset: 30,\r\n        },\r\n      ],\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      <Radar data={dataChart} options={chartOptions} />\r\n    </div>\r\n  );\r\n}\r\nexport function PolarChart() {\r\n  const [dataChart, setDataChart] = useState({});\r\n\r\n  /**chart js styling options */\r\n  const chartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    color: \"#fff\",\r\n    layout: {\r\n      padding: 40,\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: \"Polar Area Chart\",\r\n        padding: {\r\n          top: 20,\r\n          bottom: 20,\r\n        },\r\n        color: \"#fff\",\r\n        font: {\r\n          family: '\"Roboto\", monospace',\r\n          weight: \"500\",\r\n          size: 18,\r\n          lineHeight: 1,\r\n        },\r\n      },\r\n      //tooltip styling and logic\r\n      tooltip: {\r\n        // basic styling of the tooltip(onHover)\r\n        mode: \"nearest\", //allow tooltip to show once the mouse is at the nearest defined data item rather than only once it intersects\r\n        axis: \"x\",\r\n        enabled: true,\r\n        displayColors: true, //remove the tiny colored box in the tooltip label\r\n        titleSpacing: 3,\r\n        titleMarginBottom: 2,\r\n        caretPadding: 6,\r\n        caretSize: 4,\r\n        padding: 8,\r\n        backgroundColor: \"rgb(255, 255, 255)\",\r\n        bodyAlign: \"center\",\r\n        titleColor: \"#333\",\r\n        titleFont: {\r\n          family: '\"Roboto\", monospace',\r\n          weight: \"500\",\r\n          size: 18,\r\n          lineHeight: 1,\r\n        },\r\n\r\n        xPadding: 12,\r\n        yPadding: 12,\r\n        titleAlign: \"center\",\r\n        callbacks: {\r\n          /** label color */\r\n          labelColor: function (tooltipItem, chart) {\r\n            return {\r\n              borderColor: tooltipItem.dataset.borderColor,\r\n              backgroundColor: tooltipItem.dataset.borderColor,\r\n            };\r\n          },\r\n\r\n          labelTextColor: function (tooltipItem, chart) {\r\n            return \"#333\";\r\n          },\r\n        },\r\n      },\r\n    },\r\n\r\n    scales: {\r\n      r: {\r\n        angleLines: {\r\n          color: \"#201d3a\",\r\n        },\r\n        grid: {\r\n          color: \"#201d3a\",\r\n        },\r\n        ticks: {\r\n          color: \"#574545\",\r\n          backdropColor: \"#1c1b2b\",\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    /**creating empty arrays for the chart data and pushing the props gotten from home component */\r\n    let data = [];\r\n    let dataTwo = [];\r\n    let labels = [];\r\n\r\n    ChartData.RadarData.values.forEach((val) => {\r\n      if (val.category === \"Allocated budget\") {\r\n        labels.push(val.key);\r\n        data.push(val.value);\r\n      }\r\n    });\r\n    ChartData.PolarData.values.forEach((val) => {\r\n      dataTwo.push(val);\r\n    });\r\n\r\n    setDataChart({\r\n      labels,\r\n      datasets: [\r\n        {\r\n          type: \"polarArea\",\r\n          label: \"Actual spending\",\r\n          data: dataTwo,\r\n          borderColor: [\r\n            \"rgba(141, 18, 110)\",\r\n            \"rgba(61, 75, 204)\",\r\n            \"rgba(189, 46, 10)\",\r\n            \"rgba(26, 238, 72)\",\r\n            \"rgba(21, 138, 216)\",\r\n            \"rgba(96, 21, 216)\",\r\n          ],\r\n          fill: \"origin\",\r\n          backgroundColor: [\r\n            \"rgba(141, 18, 110,.4)\",\r\n            \"rgba(61, 75, 204,0.4)\",\r\n            \"rgba(189, 46, 10,0.4)\",\r\n            \"rgba(26, 238, 72, 0.4)\",\r\n            \"rgba(21, 138, 216, 0.4)\",\r\n            \"rgba(96, 21, 216, 0.4)\",\r\n          ],\r\n          borderWidth: 1.7,\r\n          hoverOffset: 30,\r\n        },\r\n      ],\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      <PolarArea data={dataChart} options={chartOptions} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function PolarLine() {\r\n  let values = [];\r\n\r\n  ChartData.PolarData.values.forEach((val) => values.push(val));\r\n\r\n  let options = {\r\n    chart: {\r\n      polar: true,\r\n      backgroundColor: \"#1c1b2b\",\r\n      borderRadius: 15,\r\n    },\r\n    title: {\r\n      text: \"Polar Line Chart\",\r\n      style: {\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n\r\n    xAxis: {\r\n      tickInterval: 45,\r\n      min: 0,\r\n      max: 360,\r\n      labels: {\r\n        format: \"{value}°\",\r\n      },\r\n      gridLineColor: \"#302c53\",\r\n      lineWidth: 0.4,\r\n    },\r\n\r\n    yAxis: {\r\n      min: 0,\r\n      gridLineColor: \"#302c53\",\r\n      lineWidth: 0.5,\r\n    },\r\n\r\n    plotOptions: {\r\n      series: {\r\n        pointStart: 0,\r\n        pointInterval: 45,\r\n      },\r\n      column: {\r\n        pointPadding: 0,\r\n        groupPadding: 0,\r\n      },\r\n    },\r\n\r\n    colors: [\"#4e4ed6\"],\r\n\r\n    legend: {\r\n      layout: \"vertical\",\r\n      align: \"right\",\r\n      verticalAlign: \"top\",\r\n      x: -70,\r\n      y: 80,\r\n      floating: true,\r\n      borderWidth: 1,\r\n      backgroundColor:\r\n        Highcharts.defaultOptions.legend.backgroundColor || \"#FFFFFF\",\r\n      shadow: true,\r\n    },\r\n\r\n    series: [\r\n      {\r\n        type: \"line\",\r\n        name: \"Line\",\r\n        data: values,\r\n      },\r\n    ],\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ minWidth: \"360px\", maxWidth: \"800px\", margin: \"1em auto\" }}>\r\n      <HighchartsReact highcharts={Highcharts} options={options} />\r\n    </div>\r\n  );\r\n}\r\n","import HighchartsReact from \"highcharts-react-official\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Highcharts from \"highcharts/highstock\";\r\nimport StockData from \"../assets/stock.json\";\r\nimport HollowCandlestick from \"highcharts/modules/hollowcandlestick\";\r\nimport HeikinAshi from \"highcharts/modules/heikinashi\";\r\nimport Indicators from \"highcharts/indicators/indicators-all\";\r\nimport DragPanes from \"highcharts/modules/drag-panes\";\r\nimport AnnotationsAdvanced from \"highcharts/modules/annotations-advanced\";\r\nimport PriceIndicator from \"highcharts/modules/price-indicator\";\r\nimport FullScreen from \"highcharts/modules/full-screen\";\r\nimport StockTools from \"highcharts/modules/stock-tools\";\r\nimport moment from 'moment';\r\n\r\nimport \"../App.css\";\r\nHollowCandlestick(Highcharts);\r\nHeikinAshi(Highcharts);\r\n\r\nIndicators(Highcharts);\r\nDragPanes(Highcharts);\r\nAnnotationsAdvanced(Highcharts);\r\nPriceIndicator(Highcharts);\r\nFullScreen(Highcharts);\r\nStockTools(Highcharts);\r\n\r\nexport function StockCharts({ market, ohlc }) {\r\n  const [options, setOptions] = useState({\r\n    chart: {\r\n      backgroundColor: \"#1c1b2b\",\r\n      borderRadius: 15,\r\n      height: 600,\r\n    },\r\n\r\n    title: {\r\n      text: \"Candlestick, Volume & SMA Indicator\",\r\n      style: {\r\n        color: \"#fff\",\r\n        fontFamily: '\"Syne Mono\", monospace',\r\n      },\r\n    },\r\n\r\n    series: [],\r\n\r\n    rangeSelector: {\r\n      buttons: [\r\n        {\r\n          type: \"month\",\r\n          count: 1,\r\n          text: \"1m\",\r\n          title: \"View 1 month\",\r\n        },\r\n        {\r\n          type: \"month\",\r\n          count: 4,\r\n          text: \"4m\",\r\n          title: \"View 4 months\",\r\n        },\r\n        {\r\n          type: \"month\",\r\n          count: 8,\r\n          text: \"8m\",\r\n          title: \"View 8 months\",\r\n        },\r\n        {\r\n          type: \"ytd\",\r\n          text: \"YTD\",\r\n          title: \"View year to date\",\r\n        },\r\n        {\r\n          type: \"all\",\r\n          count: 1,\r\n          text: \"All\",\r\n          title: \"View All\",\r\n        },\r\n      ],\r\n      buttonTheme: {\r\n        // styles for the buttons\r\n        fill: \"none\",\r\n        stroke: \"none\",\r\n        \"stroke-width\": 0,\r\n        r: 8,\r\n        style: {\r\n          color: \"#4F6C89\",\r\n          fontWeight: \"bold\",\r\n        },\r\n        states: {\r\n          hover: {},\r\n          select: {\r\n            fill: \"transparent\",\r\n            style: {\r\n              color: \"#D76F2A\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n      inputBoxBorderColor: \"#4F6C89\",\r\n      inputBoxWidth: 110,\r\n      inputBoxHeight: 18,\r\n      inputStyle: {\r\n        color: \"#4F6C89\",\r\n        fontWeight: \"bold\",\r\n      },\r\n      labelStyle: {\r\n        color: \"#cbd1d6\",\r\n        fontWeight: \"bold\",\r\n      },\r\n      selected: 5,\r\n    },\r\n\r\n    plotOptions: {\r\n      line: {\r\n        dashStyle: \"dash\",\r\n      },\r\n      series: {\r\n        borderColor: \"red\",\r\n        marker: {\r\n          enabled: false,\r\n          radius: 0,\r\n        },\r\n      },\r\n      candlestick: {\r\n        lineColor: \"#FB1809\",\r\n        color: \"#FB1809\",\r\n        upColor: \"#4EA64A\",\r\n        upLineColor: \"#4EA64A\",\r\n      },\r\n      column: {\r\n        color: \"#405466\",\r\n      },\r\n      sma: {\r\n        lineWidth: 1,\r\n      },\r\n      klinger: {\r\n        color: \"#10c210\",\r\n      },\r\n    },\r\n\r\n    xAxis: {\r\n      lineWidth: 0.1,\r\n      tickColor: \"#1c1b2b\",\r\n      crosshair: {\r\n        color: \"#696777\",\r\n        dashStyle: \"dash\",\r\n      },\r\n      gridLineColor: \"#201d3a\",\r\n    },\r\n\r\n    yAxis: [\r\n      {\r\n        labels: {\r\n          align: \"right\",\r\n          x: -2,\r\n        },\r\n        height: \"55%\",\r\n        crosshair: {\r\n          dashStyle: \"dash\",\r\n          color: \"#696777\",\r\n        },\r\n\r\n        resize: {\r\n          enabled: true,\r\n          lineWidth: 2,\r\n          lineColor: \"#1d1c30\",\r\n        },\r\n        gridLineColor: \"#201d3a\",\r\n        lineWidth: 0,\r\n        visible: true,\r\n      },\r\n      {\r\n        labels: {\r\n          align: \"right\",\r\n          x: -3,\r\n        },\r\n        top: \"55%\",\r\n        height: \"29.5%\",\r\n        offset: 0,\r\n        lineWidth: 0,\r\n        crosshair: false,\r\n        gridLineColor: \"#201d3a\",\r\n        visible: true,\r\n      },\r\n      {\r\n        top: \"85%\",\r\n        height: \"15%\",\r\n        gridLineColor: \"#201d3a\",\r\n      },\r\n    ],\r\n\r\n    tooltip: {\r\n      shape: \"rect\",\r\n      split: true,\r\n      valueDecimals: 2,\r\n\r\n      positioner: function (width, height, point) {\r\n        var chart = this.chart,\r\n          position;\r\n\r\n        if (point.isHeader) {\r\n          position = {\r\n            x: Math.max(\r\n              // Left side limit\r\n              0,\r\n              Math.min(\r\n                point.plotX + chart.plotLeft - width / 2,\r\n                // Right side limit\r\n                chart.chartWidth - width - chart.marginRight\r\n              )\r\n            ),\r\n            y: point.plotY,\r\n          };\r\n        } else {\r\n          position = {\r\n            x: point.series.chart.plotLeft,\r\n            y: point.series.yAxis.top - chart.plotTop,\r\n          };\r\n        }\r\n\r\n        return position;\r\n      },\r\n    },\r\n\r\n    stockTools: {\r\n      gui: {\r\n        enabled: false,\r\n      },\r\n    },\r\n\r\n    navigator: {\r\n      enabled: true,\r\n      height: 50,\r\n      margin: 10,\r\n      outlineColor: \"#8380a5\",\r\n      handles: {\r\n        backgroundColor: \"#8380a5\",\r\n        borderColor: \"#e9d5d5\",\r\n      },\r\n      xAxis: {\r\n        gridLineColor: \"#8380a5\",\r\n      },\r\n    },\r\n\r\n    scrollbar: {\r\n      barBackgroundColor: \"#8380a5\",\r\n      barBorderColor: \"#8380a5\",\r\n      barBorderRadius: 8,\r\n      buttonArrowColor: \"#fff\",\r\n      buttonBackgroundColor: \"#405466\",\r\n      rifleColor: \"#fff\",\r\n      trackBackgroundColor: \"#e9d5d5\",\r\n    },\r\n\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    setOptions((prevState) => ({\r\n      ...prevState,\r\n      series: [\r\n        {\r\n          type: \"candlestick\",\r\n          name: \"Bitcoin\",\r\n          id: \"bitcoin\",\r\n          data: ohlc,\r\n        },\r\n        {\r\n          type: \"column\",\r\n          name: \"Volume\",\r\n          id: \"volume\",\r\n          data: market.total_volumes,\r\n          yAxis: 1,\r\n        },\r\n        {\r\n          type: \"sma\",\r\n          id: \"overlay\",\r\n          linkedTo: \"bitcoin\",\r\n          yAxis: 0,\r\n        },\r\n        {\r\n          type: \"klinger\",\r\n          id: \"oscillator\",\r\n          linkedTo: \"bitcoin\",\r\n          params: {\r\n            volumeSeriesID: \"volume\",\r\n          },\r\n          yAxis: 2,\r\n        },\r\n      ],\r\n    }));\r\n  }, [ohlc, market]);\r\n\r\n  return (\r\n    <div style={{ minWidth: \"360px\", maxWidth: \"800px\", margin: \"1em auto\" }}>\r\n      <HighchartsReact\r\n        highcharts={Highcharts}\r\n        constructorType={\"stockChart\"}\r\n        options={options}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport function CandlesticksvHeikin({ ohlc }) {\r\n  const [options, setOptions] = useState({\r\n    chart: {\r\n      backgroundColor: \"#1c1b2b\",\r\n      borderRadius: 15,\r\n      height: 600,\r\n    },\r\n\r\n    title: {\r\n      text: \"Candlestick vs Heikin Ashi\",\r\n      style: {\r\n        color: \"#fff\",\r\n        fontFamily: '\"Syne Mono\", monospace',\r\n      },\r\n    },\r\n\r\n    series: [],\r\n\r\n    rangeSelector: {\r\n      buttons: [\r\n        {\r\n          type: \"month\",\r\n          count: 1,\r\n          text: \"1m\",\r\n          title: \"View 1 month\",\r\n        },\r\n        {\r\n          type: \"month\",\r\n          count: 4,\r\n          text: \"4m\",\r\n          title: \"View 4 months\",\r\n        },\r\n        {\r\n          type: \"month\",\r\n          count: 8,\r\n          text: \"8m\",\r\n          title: \"View 8 months\",\r\n        },\r\n        {\r\n          type: \"ytd\",\r\n          text: \"YTD\",\r\n          title: \"View year to date\",\r\n        },\r\n        {\r\n          type: \"all\",\r\n          count: 1,\r\n          text: \"All\",\r\n          title: \"View All\",\r\n        },\r\n      ],\r\n      buttonTheme: {\r\n        // styles for the buttons\r\n        fill: \"none\",\r\n        stroke: \"none\",\r\n        \"stroke-width\": 0,\r\n        r: 8,\r\n        style: {\r\n          color: \"#4F6C89\",\r\n          fontWeight: \"bold\",\r\n        },\r\n        states: {\r\n          hover: {},\r\n          select: {\r\n            fill: \"transparent\",\r\n            style: {\r\n              color: \"#D76F2A\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n      inputBoxBorderColor: \"#4F6C89\",\r\n      inputBoxWidth: 110,\r\n      inputBoxHeight: 18,\r\n      inputStyle: {\r\n        color: \"#4F6C89\",\r\n        fontWeight: \"bold\",\r\n      },\r\n      labelStyle: {\r\n        color: \"#cbd1d6\",\r\n        fontWeight: \"bold\",\r\n      },\r\n      selected: 5,\r\n    },\r\n\r\n    plotOptions: {\r\n      line: {\r\n        dashStyle: \"dash\",\r\n      },\r\n      series: {\r\n        borderColor: \"red\",\r\n        marker: {\r\n          enabled: false,\r\n          radius: 0,\r\n        },\r\n      },\r\n      candlestick: {\r\n        lineColor: \"#FB1809\",\r\n        color: \"#FB1809\",\r\n        upColor: \"#4EA64A\",\r\n        upLineColor: \"#4EA64A\",\r\n      },\r\n      heikinashi: {\r\n        lineColor: \"#FB1809\",\r\n        color: \"#FB1809\",\r\n        upColor: \"#4EA64A\",\r\n        upLineColor: \"#4EA64A\",\r\n      },\r\n\r\n      sma: {\r\n        lineWidth: 1,\r\n      },\r\n    },\r\n\r\n    xAxis: {\r\n      lineWidth: 0.1,\r\n      tickColor: \"#1c1b2b\",\r\n      crosshair: {\r\n        color: \"#696777\",\r\n        dashStyle: \"dash\",\r\n      },\r\n    },\r\n\r\n    yAxis: [\r\n      {\r\n        labels: {\r\n          align: \"right\",\r\n          x: -2,\r\n        },\r\n        height: \"50%\",\r\n        crosshair: {\r\n          dashStyle: \"dash\",\r\n          color: \"#696777\",\r\n        },\r\n\r\n        resize: {\r\n          enabled: true,\r\n          lineWidth: 2,\r\n          lineColor: \"#1d1c30\",\r\n        },\r\n        gridLineColor: \"#201d3a\",\r\n        lineWidth: 0,\r\n        visible: true,\r\n      },\r\n      {\r\n        labels: {\r\n          align: \"right\",\r\n          x: -3,\r\n        },\r\n        top: \"50%\",\r\n        height: \"50%\",\r\n        offset: 0,\r\n        lineWidth: 0,\r\n        crosshair: false,\r\n        gridLineColor: \"#201d3a\",\r\n        visible: true,\r\n      },\r\n    ],\r\n\r\n    tooltip: {\r\n      shape: \"rect\",\r\n      split: true,\r\n      valueDecimals: 2,\r\n\r\n      positioner: function (width, height, point) {\r\n        var chart = this.chart,\r\n          position;\r\n\r\n        if (point.isHeader) {\r\n          position = {\r\n            x: Math.max(\r\n              // Left side limit\r\n              0,\r\n              Math.min(\r\n                point.plotX + chart.plotLeft - width / 2,\r\n                // Right side limit\r\n                chart.chartWidth - width - chart.marginRight\r\n              )\r\n            ),\r\n            y: point.plotY,\r\n          };\r\n        } else {\r\n          position = {\r\n            x: point.series.chart.plotLeft,\r\n            y: point.series.yAxis.top - chart.plotTop,\r\n          };\r\n        }\r\n\r\n        return position;\r\n      },\r\n    },\r\n\r\n    stockTools: {\r\n      gui: {\r\n        enabled: false,\r\n      },\r\n    },\r\n\r\n    navigator: {\r\n      enabled: true,\r\n      height: 50,\r\n      margin: 10,\r\n      outlineColor: \"#8380a5\",\r\n      handles: {\r\n        backgroundColor: \"#8380a5\",\r\n        borderColor: \"#e9d5d5\",\r\n      },\r\n      xAxis: {\r\n        gridLineColor: \"#8380a5\",\r\n      },\r\n    },\r\n\r\n    scrollbar: {\r\n      barBackgroundColor: \"#8380a5\",\r\n      barBorderColor: \"#8380a5\",\r\n      barBorderRadius: 8,\r\n      buttonArrowColor: \"#fff\",\r\n      buttonBackgroundColor: \"#405466\",\r\n      rifleColor: \"#fff\",\r\n      trackBackgroundColor: \"#e9d5d5\",\r\n    },\r\n\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    setOptions((prevState) => ({\r\n      ...prevState,\r\n      series: [\r\n        {\r\n          type: \"candlestick\",\r\n          name: \"Bitcoin Candlestick\",\r\n          id: \"bitcoin\",\r\n          data: ohlc,\r\n        },\r\n        {\r\n          type: \"heikinashi\",\r\n          name: \"Bitcoin Heikin\",\r\n          id: \"bitcoinheikin\",\r\n          data: ohlc,\r\n          yAxis: 1,\r\n        },\r\n      ],\r\n    }));\r\n  }, [ohlc]);\r\n\r\n  return (\r\n    <div style={{ minWidth: \"360px\", maxWidth: \"800px\", margin: \"1em auto\" }}>\r\n      <HighchartsReact\r\n        highcharts={Highcharts}\r\n        constructorType={\"stockChart\"}\r\n        options={options}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function CandleSticks({data}) {\r\n  // var data = StockData.AAPLStock;\r\n\r\n  var ohlc = [],\r\n    volume = [],\r\n    dataLength = data.length,\r\n    i = 0;\r\n\r\n  for (i; i < dataLength; i += 1) {\r\n    ohlc.push([\r\n      data[i][0], // the date\r\n      parseFloat(data[i][1]), // open\r\n      parseFloat(data[i][2]), // high\r\n      parseFloat(data[i][3]), // low\r\n      parseFloat(data[i][4]), // close\r\n    ]);\r\n\r\n    volume.push([\r\n      data[i][0], // the date\r\n      parseFloat(data[i][5]), // the volume\r\n    ]);\r\n  }\r\n  var options = {\r\n    chart: {\r\n      backgroundColor: \"#1c1b2b\",\r\n      borderRadius: 15,\r\n      height: 800,\r\n    },\r\n\r\n    title: {\r\n      text: \"BitCoin\",\r\n      style: {\r\n        color: \"#fff\",\r\n        fontFamily: '\"Syne Mono\", monospace',\r\n      },\r\n    },\r\n\r\n    series: [\r\n      {\r\n        type: \"candlestick\",\r\n        name: \"MSFT\",\r\n        id: \"msft\",\r\n        data: ohlc,\r\n        tooltip: {\r\n          pointFormat:\r\n            '<span style=\"color:{point.color}\">●</span>' +\r\n            \"Open: {point.open} \" +\r\n            \"High: {point.high} \" +\r\n            \"Low: {point.low} \" +\r\n            \"Close: {point.close}\",\r\n        },\r\n      },\r\n      {\r\n        type: \"abands\",\r\n        id: \"overlay\",\r\n        linkedTo: \"msft\",\r\n        yAxis: 0,\r\n        tooltip: {\r\n          valueDecimals: 2,\r\n        },\r\n      },\r\n      {\r\n        type: \"column\",\r\n        name: \"Volume\",\r\n        id: \"volume\",\r\n        data: volume,\r\n        yAxis: 1,\r\n      },\r\n      {\r\n        type: \"ao\",\r\n        id: \"oscillator\",\r\n        linkedTo: \"msft\",\r\n        yAxis: 2,\r\n      },\r\n    ],\r\n\r\n    rangeSelector: {\r\n      buttonTheme: {\r\n        // styles for the buttons\r\n        fill: \"none\",\r\n        stroke: \"none\",\r\n        \"stroke-width\": 0,\r\n        r: 8,\r\n        style: {\r\n          color: \"#4F6C89\",\r\n          fontWeight: \"bold\",\r\n        },\r\n        states: {\r\n          hover: {},\r\n          select: {\r\n            fill: \"transparent\",\r\n            style: {\r\n              color: \"#D76F2A\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n      inputBoxBorderColor: \"#4F6C89\",\r\n      inputBoxWidth: 110,\r\n      inputBoxHeight: 18,\r\n      inputStyle: {\r\n        color: \"#4F6C89\",\r\n        fontWeight: \"bold\",\r\n      },\r\n      labelStyle: {\r\n        color: \"#cbd1d6\",\r\n        fontWeight: \"bold\",\r\n      },\r\n      selected: 1,\r\n    },\r\n\r\n    plotOptions: {\r\n      line: {\r\n        dashStyle: \"dash\",\r\n      },\r\n      series: {\r\n        borderColor: \"red\",\r\n        marker: {\r\n          enabled: false,\r\n          radius: 0,\r\n        },\r\n      },\r\n      candlestick: {\r\n        lineColor: \"#FB1809\",\r\n        color: \"#FB1809\",\r\n        upColor: \"#4EA64A\",\r\n        upLineColor: \"#4EA64A\",\r\n      },\r\n      column: {\r\n        color: \"#435564\",\r\n      },\r\n      abands: {\r\n        lineWidth: 1,\r\n        lineColor: \"#20a0b1\",\r\n        bottomLine: {\r\n          styles: {\r\n            lineWidth: 0.5,\r\n            lineColor: \"#fcfc27\",\r\n          },\r\n        },\r\n        topLine: {\r\n          styles: {\r\n            lineWidth: 0.5,\r\n            lineColor: \"#2efc27\",\r\n          },\r\n        },\r\n      },\r\n    },\r\n\r\n    xAxis: {\r\n      lineWidth: 0.1,\r\n      tickColor: \"#2f2952\",\r\n      crosshair: {\r\n        color: \"#8e8aac\",\r\n        dashStyle: \"dash\",\r\n      },\r\n    },\r\n\r\n    yAxis: [\r\n      {\r\n        labels: {\r\n          align: \"right\",\r\n          x: -2,\r\n        },\r\n        height: \"60%\",\r\n        crosshair: {\r\n          dashStyle: \"dash\",\r\n          snap: false,\r\n          color: \"#696777\",\r\n        },\r\n\r\n        resize: {\r\n          enabled: true,\r\n          lineWidth: 2,\r\n          lineColor: \"#1d1c30\",\r\n        },\r\n        gridLineColor: \"#201d3a\",\r\n        lineWidth: 0,\r\n        visible: true,\r\n      },\r\n      {\r\n        labels: {\r\n          align: \"right\",\r\n          x: -3,\r\n        },\r\n        top: \"60%\",\r\n        height: \"19.5%\",\r\n        offset: 0,\r\n        lineWidth: 0,\r\n        crosshair: {\r\n          dashStyle: \"dash\",\r\n          snap: false,\r\n          color: \"#696777\",\r\n        },\r\n        gridLineColor: \"#201d3a\",\r\n        visible: true,\r\n      },\r\n      {\r\n        top: \"80%\",\r\n        height: \"20%\",\r\n        gridLineColor: \"#201d3a\",\r\n      },\r\n    ],\r\n\r\n    tooltip: {\r\n      split: true,\r\n      shape: \"rect\",\r\n      shadow: false,\r\n      valueDecimals: 2,\r\n\r\n      positioner: function (width, height, point) {\r\n        var chart = this.chart,\r\n          position;\r\n\r\n        if (point.isHeader) {\r\n          position = {\r\n            x: Math.max(\r\n              // Left side limit\r\n              0,\r\n              Math.min(\r\n                point.plotX + chart.plotLeft - width / 2,\r\n                // Right side limit\r\n                chart.chartWidth - width - chart.marginRight\r\n              )\r\n            ),\r\n            y: point.plotY,\r\n          };\r\n        } else {\r\n          position = {\r\n            x: point.series.chart.plotLeft,\r\n            y: point.series.yAxis.top - chart.plotTop,\r\n          };\r\n        }\r\n\r\n        return position;\r\n      },\r\n    },\r\n\r\n    stockTools: {\r\n      gui: {\r\n        enabled: false,\r\n      },\r\n    },\r\n\r\n    navigator: {\r\n      enabled: true,\r\n      height: 50,\r\n      margin: 10,\r\n      outlineColor: \"#8380a5\",\r\n      handles: {\r\n        backgroundColor: \"#8380a5\",\r\n        borderColor: \"#e9d5d5\",\r\n      },\r\n      xAxis: {\r\n        gridLineColor: \"#8380a5\",\r\n      },\r\n    },\r\n\r\n    scrollbar: {\r\n      barBackgroundColor: \"#8380a5\",\r\n      barBorderColor: \"#8380a5\",\r\n      barBorderRadius: 8,\r\n      buttonArrowColor: \"#fff\",\r\n      buttonBackgroundColor: \"#405466\",\r\n      rifleColor: \"#fff\",\r\n      trackBackgroundColor: \"#e9d5d5\",\r\n    },\r\n\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n    time: {\r\n      timezone: 'Asia/Ho_Chi_Minh',\r\n      useUTC:false\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ minWidth: \"360px\", maxWidth: \"1500px\", margin: \"1em auto\" }}>\r\n      <HighchartsReact\r\n        highcharts={Highcharts}\r\n        constructorType={\"stockChart\"}\r\n        options={options}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function AreaSpline({ splineData }) {\r\n  const [options, setOptions] = useState({\r\n    chart: {\r\n      backgroundColor: \"#1c1b2b\",\r\n      borderRadius: 15,\r\n      height: 600,\r\n    },\r\n\r\n    title: {\r\n      text: \"Spline Chart Showing Prices\",\r\n      style: {\r\n        color: \"#fff\",\r\n        fontFamily: '\"Syne Mono\", monospace',\r\n      },\r\n    },\r\n\r\n    series: [],\r\n\r\n    rangeSelector: {\r\n      buttonTheme: {\r\n        // styles for the buttons\r\n        fill: \"none\",\r\n        stroke: \"none\",\r\n        \"stroke-width\": 0,\r\n        r: 8,\r\n        style: {\r\n          color: \"#4F6C89\",\r\n          fontWeight: \"bold\",\r\n        },\r\n        states: {\r\n          hover: {},\r\n          select: {\r\n            fill: \"transparent\",\r\n            style: {\r\n              color: \"#D76F2A\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n      inputBoxBorderColor: \"#4F6C89\",\r\n      inputBoxWidth: 110,\r\n      inputBoxHeight: 18,\r\n      inputStyle: {\r\n        color: \"#4F6C89\",\r\n        fontWeight: \"bold\",\r\n      },\r\n      labelStyle: {\r\n        color: \"#cbd1d6\",\r\n        fontWeight: \"bold\",\r\n      },\r\n      selected: 5,\r\n    },\r\n\r\n    plotOptions: {\r\n      line: {\r\n        dashStyle: \"dash\",\r\n      },\r\n      series: {\r\n        borderColor: \"red\",\r\n        marker: {\r\n          enabled: false,\r\n          radius: 0,\r\n        },\r\n      },\r\n    },\r\n\r\n    xAxis: {\r\n      lineWidth: 0.1,\r\n      tickColor: \"#1c1b2b\",\r\n      crosshair: {\r\n        color: \"#696777\",\r\n        dashStyle: \"dash\",\r\n      },\r\n    },\r\n\r\n    yAxis: [\r\n      {\r\n        labels: {\r\n          align: \"right\",\r\n          x: -2,\r\n        },\r\n        height: \"100%\",\r\n        crosshair: {\r\n          dashStyle: \"dash\",\r\n          color: \"#696777\",\r\n        },\r\n\r\n        resize: {\r\n          enabled: true,\r\n          lineWidth: 2,\r\n          lineColor: \"#1d1c30\",\r\n        },\r\n        gridLineColor: \"#201d3a\",\r\n        lineWidth: 0,\r\n        visible: true,\r\n      },\r\n    ],\r\n\r\n    tooltip: {\r\n      shape: \"rect\",\r\n      split: true,\r\n      valueDecimals: 2,\r\n\r\n      positioner: function (width, height, point) {\r\n        var chart = this.chart,\r\n          position;\r\n\r\n        if (point.isHeader) {\r\n          position = {\r\n            x: Math.max(\r\n              // Left side limit\r\n              0,\r\n              Math.min(\r\n                point.plotX + chart.plotLeft - width / 2,\r\n                // Right side limit\r\n                chart.chartWidth - width - chart.marginRight\r\n              )\r\n            ),\r\n            y: point.plotY,\r\n          };\r\n        } else {\r\n          position = {\r\n            x: point.series.chart.plotLeft,\r\n            y: point.series.yAxis.top - chart.plotTop,\r\n          };\r\n        }\r\n\r\n        return position;\r\n      },\r\n    },\r\n\r\n    stockTools: {\r\n      gui: {\r\n        enabled: false,\r\n      },\r\n    },\r\n\r\n    navigator: {\r\n      enabled: true,\r\n      height: 50,\r\n      margin: 10,\r\n      outlineColor: \"#8380a5\",\r\n      handles: {\r\n        backgroundColor: \"#8380a5\",\r\n        borderColor: \"#e9d5d5\",\r\n      },\r\n      xAxis: {\r\n        gridLineColor: \"#8380a5\",\r\n      },\r\n    },\r\n\r\n    scrollbar: {\r\n      barBackgroundColor: \"#8380a5\",\r\n      barBorderColor: \"#8380a5\",\r\n      barBorderRadius: 8,\r\n      buttonArrowColor: \"#fff\",\r\n      buttonBackgroundColor: \"#405466\",\r\n      rifleColor: \"#fff\",\r\n      trackBackgroundColor: \"#e9d5d5\",\r\n    },\r\n\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    setOptions((prevState) => ({\r\n      ...prevState,\r\n      series: [\r\n        {\r\n          type: \"spline\",\r\n          name: \"Bitcoin\",\r\n          id: \"bitcoin\",\r\n          data: splineData.prices,\r\n        },\r\n      ],\r\n    }));\r\n  }, [splineData]);\r\n\r\n  return (\r\n    <div style={{ minWidth: \"360px\", maxWidth: \"800px\", margin: \"1em auto\" }}>\r\n      <HighchartsReact\r\n        highcharts={Highcharts}\r\n        constructorType={\"stockChart\"}\r\n        options={options}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Loader() {\r\n  return (\r\n    <div className=\"loader\">\r\n      <div></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loader;\r\n","import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { DepthChart } from \"../components/DepthChart.jsx\";\r\nimport { HeikenAshi, HLCChart, OHLCChart } from \"../components/HLC.jsx\";\r\nimport {\r\n  AreaSpline,\r\n  CandleSticks,\r\n  CandlesticksvHeikin,\r\n  StockCharts,\r\n} from \"../components/OHLCCharts\";\r\nimport Loader from \"../components/Loader.jsx\";\r\n\r\nfunction CandleStick() {\r\n  const [OHLC, setOHLC] = useState([]);\r\n  const [market, setMarket] = useState([]);\r\n  const [HLC, setHLC] = useState([]);\r\n  const [heikin, setHeikin] = useState([]);\r\n  const [ethMarket, setEthMarket] = useState([]);\r\n  const [splineData, setSplineData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const getCandleStickData = () => {\r\n    // setLoading(true);\r\n    axios\r\n      .all([\r\n        axios.get(\r\n          `https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1m&startTime=${Date.now() - 60*60*1000 }&endTime=${Date.now()}`\r\n        ),\r\n        // axios.get(\r\n        //   `https://api.coingecko.com/api/v3/coins/bitcoin/ohlc?vs_currency=usd&days=365`\r\n        // ),\r\n        // axios.get(\r\n        //   `https://api.coingecko.com/api/v3/coins/ethereum/ohlc?vs_currency=usd&days=14`\r\n        // ),\r\n        // axios.get(\r\n        //   `https://api.coingecko.com/api/v3/coins/ethereum/ohlc?vs_currency=usd&days=365`\r\n        // ),\r\n        // axios.get(\r\n        //   `https://api.coingecko.com/api/v3/coins/ethereum/market_chart?vs_currency=usd&days=365`\r\n        // ),\r\n        // axios.get(\r\n        //   `https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=720&interval=hourly`\r\n        // ), \r\n      ])\r\n      .then((res) => {\r\n        // setMarket(res[0].data);\r\n        setOHLC(res[0].data);\r\n        // setHLC(res[2].data);\r\n        // setHeikin(res[1].data);\r\n        // setEthMarket(res[4].data);\r\n        //setSplineData(res[4].data);\r\n        // setLoading(false);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    getCandleStickData();\r\n    setInterval(() => {\r\n      getCandleStickData();\r\n    }, 10000);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    axios\r\n      .all([\r\n        axios.get(\r\n          `https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1m&startTime=${Date.now() - 60*60*1000 }&endTime=${Date.now()}`\r\n        ),\r\n        // axios.get(\r\n        //   `https://api.coingecko.com/api/v3/coins/bitcoin/ohlc?vs_currency=usd&days=365`\r\n        // ),\r\n        // axios.get(\r\n        //   `https://api.coingecko.com/api/v3/coins/ethereum/ohlc?vs_currency=usd&days=14`\r\n        // ),\r\n        // axios.get(\r\n        //   `https://api.coingecko.com/api/v3/coins/ethereum/ohlc?vs_currency=usd&days=365`\r\n        // ),\r\n        // axios.get(\r\n        //   `https://api.coingecko.com/api/v3/coins/ethereum/market_chart?vs_currency=usd&days=365`\r\n        // ),\r\n        // axios.get(\r\n        //   `https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=720&interval=hourly`\r\n        // ), \r\n      ])\r\n      .then((res) => {\r\n        // setMarket(res[0].data);\r\n        setOHLC(res[0].data);\r\n        // setHLC(res[2].data);\r\n        // setHeikin(res[1].data);\r\n        // setEthMarket(res[4].data);\r\n        //setSplineData(res[4].data);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          {\" \"}\r\n          {/* <AreaSpline splineData={splineData} /> */}\r\n          {/* <OHLCChart hlc={HLC} /> */}\r\n          <CandleSticks data={OHLC} />\r\n          {/* <DepthChart /> */}\r\n          {/* <HeikenAshi heikin={heikin} market={ethMarket} /> */}\r\n          {/* <HLCChart ohlc={HLC} /> */}\r\n          {/* <CandlesticksvHeikin ohlc={OHLC} /> */}\r\n          {/* <StockCharts market={market} ohlc={OHLC} /> */}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CandleStick;\r\n","import React from \"react\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport HighchartsMaps from \"highcharts/modules/map\";\r\nimport WorldMapGeo from \"@highcharts/map-collection/custom/world-palestine-highres.geo.json\";\r\nimport WorldMapData from \"../assets/mapdata.json\";\r\nimport USMapGeoJSON from \"@highcharts/map-collection/countries/us/us-all-all.geo.json\";\r\n\r\nHighchartsMaps(Highcharts);\r\n\r\nexport function WorldMap() {\r\n  const options = {\r\n    chart: {\r\n      backgroundColor: \"#1c1b2b\",\r\n      borderRadius: 15,\r\n      height: 600,\r\n    },\r\n\r\n    title: {\r\n      text: \"Simple Chloropleth Map\",\r\n      style: {\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n\r\n    subtitle: {\r\n      text: \"Source: <a style='color:#fff' href='https://datahub.io/JohnSnowLabs/population-figures-by-country'>Datahub.io (2016)</a>\",\r\n      style: {\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n\r\n    mapNavigation: {\r\n      enabled: true,\r\n      buttonOptions: {\r\n        verticalAlign: \"bottom\",\r\n      },\r\n    },\r\n\r\n    colorAxis: {\r\n      min: 1,\r\n      max: 200000000,\r\n      type: \"logarithmic\",\r\n    },\r\n\r\n    series: [\r\n      {\r\n        type: \"map\",\r\n        data: WorldMapData.CountryPopulation,\r\n        mapData: WorldMapGeo,\r\n        joinBy: [\"iso-a3\", \"country\"],\r\n        name: \"Population\",\r\n        borderColor: \"#fff\",\r\n        borderWidth: 0.2,\r\n        states: {\r\n          hover: {\r\n            borderWidth: 1,\r\n            color: \"#c7eda4\",\r\n          },\r\n        },\r\n      },\r\n    ],\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ minWidth: \"360px\", maxWidth: \"800px\", margin: \"1em auto\" }}>\r\n      <HighchartsReact\r\n        highcharts={Highcharts}\r\n        constructorType={\"mapChart\"}\r\n        options={options}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport function USMap() {\r\n  const options = {\r\n    chart: {\r\n      backgroundColor: \"#1c1b2b\",\r\n      borderRadius: 15,\r\n      height: 600,\r\n    },\r\n\r\n    title: {\r\n      text: \"Chloropleth Map with over 3000 Data Points\",\r\n      style: {\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n\r\n    subtitle: {\r\n      text: \"Source: <a style='color:#fff' href='https://www.bls.gov/lau/#tables'>bls.gov (2021)</a>\",\r\n      style: {\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n\r\n    mapNavigation: {\r\n      enabled: true,\r\n      buttonOptions: {\r\n        verticalAlign: \"bottom\",\r\n      },\r\n    },\r\n\r\n    colorAxis: {\r\n      min: 1,\r\n      max: 10,\r\n      type: \"logarithmic\",\r\n      labels: {\r\n        format: \"{value}%\",\r\n      },\r\n    },\r\n\r\n    series: [\r\n      {\r\n        type: \"map\",\r\n        data: WorldMapData.unemploymentData,\r\n        mapData: USMapGeoJSON,\r\n        joinBy: [\"hc-key\", \"code\"],\r\n        name: \"Unemployment Rate\",\r\n        borderColor: \"#000\",\r\n        borderWidth: 0.2,\r\n        states: {\r\n          hover: {\r\n            borderWidth: 1,\r\n            color: \"#c7eda4\",\r\n          },\r\n        },\r\n        tooltip: {\r\n          valueSuffix: \"%\",\r\n        },\r\n      },\r\n    ],\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ minWidth: \"360px\", maxWidth: \"800px\", margin: \"1em auto\" }}>\r\n      <HighchartsReact\r\n        highcharts={Highcharts}\r\n        constructorType={\"mapChart\"}\r\n        options={options}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\r\nimport Lines from \"./pages/Lines\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { AppProvider } from \"./state/context/AppContext\";\r\nimport Home from \"./pages/Home\";\r\nimport Bars from \"./pages/Bars\";\r\nimport Pie from \"./pages/Pie\";\r\nimport Scatter from \"./pages/Scatter\";\r\nimport CandleStick from \"./pages/CandleStick\";\r\nimport Maps from \"./pages/Maps\";\r\n\r\nfunction App() {\r\n  return (\r\n    <AppProvider>\r\n      <div className=\"App\">\r\n        <Router>\r\n          <Switch>\r\n            <Route component={CandleStick} path=\"/\" exact />\r\n            {/* <Route component={Lines} path=\"/lines\" />\r\n            <Route component={Bars} path=\"/bars\" />\r\n            <Route component={Pie} path=\"/pie\" />\r\n            <Route component={Scatter} path=\"/scatter\" />\r\n            <Route component={CandleStick} path=\"/ohlc-and-candlestick\" />\r\n            <Route component={Maps} path=\"/maps\" /> */}\r\n          </Switch>\r\n        </Router>\r\n      </div>\r\n    </AppProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}